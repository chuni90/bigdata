package stu.com.vo;
import static stu.com.db.JdbcUtils.close;
import static stu.com.db.JdbcUtils.getConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/*
 * CRUD와 관련된 명령어를 모아서 처리하는 객체
 *  INSERT, SELECT, UPDATE, DELETE
 */

public class StudentDAO {
	
	// 학생정보를 DB에 등록하는 메서드
	public int makestudent(StudentDTO dto) {
		String sql = "INSERT INTO student values(?, ?, ?, ?, ?)";
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		int check = 0;
		
		
		try {
			conn = getConnection();    // static으로 getconnetino해놔서 바로 사용 가능
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dto.getId());
			pstmt.setString(2, dto.getName());
			pstmt.setInt(3, dto.getKor());
			pstmt.setInt(4, dto.getEng());
			pstmt.setInt(5, dto.getMath());
			
			check = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(conn, pstmt, null);
		}
		
		return check;
	}
	
	// 수정 또는 검색 시, 학번을 이용하여 해당 학생 객체를 얻어오는 메서드
	public StudentDTO selectOne(String id) {
		StudentDTO dto = null;
		String sql = "SELECT * FROM student WHERE id = ?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			// next() 메소드는 테이블에서 테이블의 다음 행을 가르키는 cursor와 같은 역할
			// 다음 행이 존재한다면(값이 있다면) true, 없다면 false를 return값으로 줌
			if(rs.next()) { 
				dto = new StudentDTO(rs.getString("id"),
									 rs.getString("name"),
									 rs.getInt("kor"),
									 rs.getInt("eng"),
									 rs.getInt("math"));
			}
		}catch(Exception e) {
			System.out.println("오류 발생 >" + e.getMessage());
			e.printStackTrace();
		}finally {
			close(conn, pstmt, rs);
		}
		return dto;
	}
	
	
}
