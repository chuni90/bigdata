JDBC 프로그래밍

1. 자바와 오라클 연동을 위한 작업 순서
	1) 드라이버 로딩
	class.forName("oracle.jdbc.driver.OracleDriver");
	 → class를 import할 것이고 for name 이름을 이용해서 가져올 것이야.
	
	※ 예외(Exception) 처리
		- 에러(Error) : 프로그램이 실행된 후에 발생하는 오류로 치명적인 상항.
		- 예외(Exception) : 경미한 오류, 실행 전/컴파일 과정에서 오류가 발생할 것이라고 예측 가능한 오류
			
		- 예외문구 
			throw : 개발자에 의해 강제로 예외를 발생시킬 때, 사용하는 문구
			throws : 예외 전가
			try - catch - finally : 예외 처리	(Try_test.java 참고)
			
			try{
				class.forName("oracle.jdbc.driver.OracleDriver");
			}catch (ClassNotFoundException e) {
				System.out.println("드라이버 로딩 실패");
				System.out.println("오류 메시지: " + e.getMessage());
			}
					
	
	2) 연동객체 생성
		- URL : 오라클 서버에 접속하는 주소 
			jdbc:oracle:thin:@localhost:1521:XE
		- USER : 사용자 계정 / big_java
		- Password : 비밀번호 / 1234
		
		Connection conn = DriverManager.getConnection(jdbc:oracle:thin:@localhost:1521:XE, big_java, 1234);
	 	 	※ Connection 클래스는 '인터페이스'로 객체 생성이 불가능. 그래서 다른 DriverManager 클래스를 통해서 사용		
		
		* try문 사용
		try{
			Connection conn = DriverManager.getConnection(jdbc:oracle:thin:@localhost:1521:XE, big_java, 1234);	
		}catch(SqlException e){
			System.out.println("드라이버 연동 실패");
			System.out.println("오류 : " + e.getMessage());
		}
	
	3) 비즈니스 로직 : 실제 처리할 작업을 기술한다.
		Query => DDL, DML, DCL
		 - DDL 명령어: CREATE, ALTER, DROP
		 - DML 명령어: SELECT, INSERT, UPDATE, DELETE
		 - DCL 명령어: GRANT, REVOKE, COMMIT, ROLLBACK

		String sql = "SELECT * FROM member";  → sql이라는 문자열에 Query문을 넣는다.
		
		* 쿼리를 담는 객체
		PreparedStatement : 권장 사용객체, 동적쿼리
			ex) UPDATE member SET age = 30 WHERE name = ?;    ← ?는 사용자가 입력하게끔 하겠다는 의미
		Statement : 정적쿼리
			ex) UPDATE member(테이블명) SET age(열) = 30 WHERE name = '천';  WHERE로 딱 name이 정해져 있어서 정적쿼리
		
		conn.executeQuery() : SELECT
			※  executeQuery()는 Return값으로 ResultSet을 줌
		
		conn.executeUpdate() : INSERT, UPDATE, DELETE
		  	※ 리턴값은 int (변경된 행의 수, 0일 경우엔 뭔가 바뀌지 않았다는 것)
		  	
		ResultSet 객체 : query의 결과를 담는 객체
		
	4) 자원 닫기
	
	